storeSnippet({"id":44,"name":"Splitting Strings","description":"Dices up a string splitting it on the passed in delimiter and placing the results in an array while making sure that the empty string is converted to an empty array.","js":"function dice(str, delim, opt_limit) {\r\n  var arr = [], start = 0, i;\r\n  if (str) {\r\n    str.replace(\r\n      (typeOf(delim, 'RegExp') ? flagRegExp : quoteRegExp)(delim, 'g'),\r\n      function(m) {\r\n        i = arguments;\r\n        i = i[i.length - 2];\r\n        if (!(opt_limit-- < 1)) {\r\n          arr.push(str.slice(start, i));\r\n          start = i + (m.length || 1);\r\n        }\r\n      }\r\n    );\r\n    arr.push(str.slice(start));\r\n  }\r\n  return arr;\r\n}","post":"One of the funny things about <code>String.prototype.split()<\/code> is that if the string is the empty string, using <code>split()<\/code> on it will cause it to create an array where the 1st value is the empty string.  In many cases, the desired result is that the resulting array simply be an empty array.  <code>YourJS.dice()<\/code> was written for the specific purpose of making sure the empty string gets turned into the empty array after being \"diced\".  The other difference is that when specifying a limit on how many times the string should be diced, this makes it so that the last substring in the returned array will contain the remaining part of the string.\r\n\r\n<h2><code>dice()<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px\">\r\n  <h3>Description<\/h3>\r\n  <div>Dices up a string splitting it on the passed in delimiter and placing the results in an array.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>str<\/code> {String}:<\/b><br \/>\r\n      The string to be diced and turned into an array of strings.  If this is an empty string, an empty array will be returned.\r\n    <\/li>\r\n    <li>\r\n      <b><code>delim<\/code> {RegExp|String}:<\/b><br \/>\r\n      The regular expression or string to be used as a delimiter in order to dice up <code>str<\/code>.  The matched substrings will not be included in the strings returned in the array.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_limit<\/code> {Number}:<\/b><br \/>\r\n      Optional.  Defaults to <code>Infinity<\/code>.  If specified, this number represents the maximum number of times <code>str<\/code> will be split on <code>delim<\/code>.  Unlike with <code>String.prototype.split()<\/code>, the remaining substring after this limit will simply be placed in the last element of the array.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns an array of substrings formed by dicing (splitting) up <code>str<\/code> by <code>delim<\/code>.<\/div>\r\n<\/div>","required_ids":{"27":"quoteRegExp() - Escaping RegExp Metacharacters","28":"flagRegExp() - Modify RegExp Flags"},"tags":["Array","String"],"variables":["dice"]});
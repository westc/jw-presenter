storeSnippet({"id":49,"name":"dom() - Write HTML in JS","description":"Turns an object or an HTML string into DOM nodes.","js":"var dom;\r\n(function(RGX_DASH, INNER_TEXT, TEXT_CONTENT, STRING, PROP_HASH) {\r\n  function capAfterDash(m, afterDash) {\r\n    return afterDash.toUpperCase();\r\n  }\r\n  dom = function(obj) {\r\n    var elem, propName, propValue, i, l, j, c, style, stylePropName, kids;\r\n    if (typeOf(obj, STRING)) {\r\n      elem = slice(dom({ _: 'DIV', html: obj }).childNodes);\r\n    }\r\n    else {\r\n      elem = document.createElement(obj.nodeName || obj._);\r\n      for (propName in obj) {\r\n        propValue = obj[propName];\r\n        if (has(obj, propName) && (propName = PROP_HASH[propName] || propName) != '_') {\r\n          if (propName == 'style') {\r\n            style = elem[propName];\r\n            if (typeOf(propValue, STRING)) {\r\n              style.cssText = propValue;\r\n            }\r\n            else {\r\n              for (stylePropName in propValue) {\r\n                if (has(propValue, stylePropName)) {\r\n                  style[stylePropName.replace(RGX_DASH, capAfterDash)] = propValue[stylePropName];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else if (propName == INNER_TEXT || propName == TEXT_CONTENT) {\r\n            elem[TEXT_CONTENT] = elem[INNER_TEXT] = propValue;\r\n          }\r\n          else if (propName == '$') {\r\n            propValue = toArray(propValue);\r\n            for (i = 0, l = propValue.length; i < l;) {\r\n              for (kids = toArray(dom(propValue[i++])), j = 0, c = kids.length; j < c;) {\r\n                elem.appendChild(kids[j++]);\r\n              }\r\n            }\r\n          }\r\n          else if (\/\\W\/.test(propName)) {\r\n            elem.setAttribute(propName, propValue);\r\n          }\r\n          else {\r\n            elem[propName] = propValue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return elem;\r\n  };\r\n})(\/-([^-])\/g, 'innerText', 'textContent', 'String',\r\n  {nodeName:'_',html:'innerHTML',text:'innerText',children:'$','for':'htmlFor','class':'className',cls:'className'});","post":"<h2><code>dom()<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Turns an object or an HTML string into DOM nodes.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>obj<\/code> {Object|String}:<\/b><br \/>\r\n      If a string is specified it will be interpreted as HTML and the corresponding DOM nodes will be returned in an array.  If an <b>object<\/b> is specified it must at least have the <code>nodeName<\/code> property specified.  In order to specify the <code>style<\/code> attribute, you can specify the <code>style<\/code> property as a string or an object of style properties.  In order to set the text of the element you can define either the <code>innerText<\/code> property or the <code>textContent<\/code> property.  Add a <code>children<\/code> property as an array to the object to specify one or more child nodes.  Each item in the array should either be string or an object to be recursively interpreted by <code>YourJS.dom()<\/code>.  If <code>children<\/code> is just an object or a string it will be wrapped with an array.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns one or more DOM nodes which represent <code>obj<\/code>.<\/div>\r\n<\/div>","required_ids":{"81":"isArrayLike() & toArray()"},"tags":["Browser","Object"],"variables":["dom"]});
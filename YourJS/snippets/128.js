storeSnippet({"id":128,"name":"on0() - Determine When Multiple Asynchronous Calls Are Done","description":"Can be used to determine when multiple asynchronous calls are finished.","js":"function on0(callback, opt_initial) {\r\n  var positiveCallCount = 0, value = opt_initial || 0;\r\n  return function(increment) {\r\n    increment = ('boolean' == typeof increment || increment === undefined) ? increment ? 1 : -1 : +increment || 0;\r\n    value += increment;\r\n    if (increment > 0) {\r\n      positiveCallCount++;\r\n    }\r\n    if (!value) {\r\n      callback(positiveCallCount);\r\n    }\r\n    return value;\r\n  };\r\n}","post":"<h2><code>checkPath(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px\">\r\n  <div>Can be used to call a function once all of the desired asynchronous calls have been successfully made.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>callback<\/code> {function(<code>positiveCallCount<\/code>)}:<\/b><br \/>\r\n      The callback which will be called as soon as the amount of positive and negative calls to the returned function even out.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_initial<\/code> {number}:<\/b><br \/>\r\n      Optional.  Defaults to <code>0<\/code>.  Number to start off at.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>A function which can be passed <code>true<\/code> which is the same as passing <code>1<\/code>, <code>false<\/code> which is the same as passing <code>-1<\/code>, <code>undefined<\/code> or no arguments which come out to be <code>-1<\/code> or a value which is coerced to a number.  The number passed in will be added to the internal value (which starts off as <code>opt_initial<\/code>.  If the internal value comes to be <code>0<\/code> the callback will be called with the one argument passed specifying how many times this returned function was positively called.<\/div>\r\n<\/div>\r\n\r\n<h2>Example<\/h2>\r\n<div>Imagine that we want to see how long it really takes <code>setInterval()<\/code> with a wait period of 0ms to run a function of basically nothing 1000 times:<\/div>\r\n```javascript\r\nvar start = new Date,\r\n    interval = setInterval(function() { f(); }, 0),\r\n    f = YourJS.on0(function(count) {\r\n      console.log('It took ' + (new Date - start) + 'ms to count to ' + count + '.');\r\n      clearInterval(interval);\r\n    });\r\n\r\nfor (var i = 0; i < 1000; i++) {\r\n  f(true);\r\n}\r\n```\r\n\r\n<div>When I run the above code it takes roughly 3990ms despite the fact that we give <code>setInterval()<\/code> a wait of 0ms.  This shows that setting too low of a wait time will have no effect.<\/div>","required_ids":{},"tags":["Function"],"variables":["on0"]});
storeSnippet({"id":82,"name":"indexBy() - Indexing an Array\/Object By New Criteria","description":"Create or extend an object basing its keys and values off of another array or object.","js":"function indexBy(arrOrObj, opt_key, opt_indexAsArrays, opt_objToExtend) {\r\n  var k, hasNoKey = opt_key == undefined, keyIsFn = typeOf(opt_key, 'Function');\r\n  opt_objToExtend = opt_objToExtend || {};\r\n  walk(arrOrObj, function(t) {\r\n    k = keyIsFn\r\n      ? opt_key.call(opt_objToExtend, t, arrOrObj)\r\n      : hasNoKey\r\n        ? t\r\n        : t[opt_key];\r\n    if (k != undefined) {\r\n      if (opt_indexAsArrays) {\r\n        if (!(k in opt_objToExtend)) {\r\n          opt_objToExtend[k] = [];\r\n        }\r\n        else if (!typeOf(opt_objToExtend[k], 'Array')) {\r\n          opt_objToExtend[k] = [opt_objToExtend[k]];\r\n        }\r\n        opt_objToExtend[k].push(t);\r\n      }\r\n      else {\r\n        opt_objToExtend[k] = t;\r\n      }\r\n    }\r\n  });\r\n  return opt_objToExtend;\r\n}","post":"<h2>Example - Hashing Numbers<\/h2>\r\nLet's say that we have an array of numbers that we would like to put into buckets depending on the remainder when they are divided by 3:\r\n```javascript\r\nvar numbers = [1,5,32,8,51,0];\r\nvar buckets3 = YourJS.indexBy(numbers, function(num) {\r\n  return num % 3;\r\n}, true, []);\r\n\/\/ > [[51,0],[1],[5,32,8]]\r\n```\r\n\r\n<h2>Example - Getting All Elements By Node Name<\/h2>\r\nLet's say that you want to get all of the elements on the page indexed by their `nodeName`.  This is how you could get it done:\r\n```javascript\r\nvar allElems = document.getElementsByTagName('*');\r\nvar elemsByNodeName = YourJS.indexBy(allElems, 'nodeName', true);\r\n```\r\n\r\nOne thing to keep in mind is that in most modern browsers, the `nodeName` property values are capitalized, therefore if we wanted to store all of the elements by their `nodeName` but in lowercased form I could do this:\r\n```javascript\r\nvar allElems = document.getElementsByTagName('*');\r\nvar elemsByNodeName = YourJS.indexBy(allElems, function(elem) {\r\n  return elem.nodeName.toLowerCase();\r\n}, true);\r\n```\r\n\r\n<h2><code>indexBy(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px\">\r\n  <h3>Description<\/h3>\r\n  <div>Create or extend an object basing its keys and values off of another array or object.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>arrOrObj<\/code> {Array|Object}:<\/b><br \/>\r\n      All of the items in the array, array-like object, or other type of object will be iterated over and each item found with a specified key will be indexed in a new object (or in <code>opt_objToExtend<\/code> if it is specified).\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_key<\/code> {Function|number|string|undefined}:<\/b>\r\n      <ul>\r\n        <li>\r\n          <b>If a <code>number<\/code> or a <code>string<\/code> is given...<\/b><br \/>\r\n          the value at that index in each item of <code>arrOrObj<\/code> will be used to index the item in the returned object (AKA <code>opt_objToExtend<\/code>).\r\n        <\/li>\r\n        <li>\r\n          <b>If a function (<code class=\"language-javascript\">function(this: opt_objToExtend, value, arrOrObj) -&gt; opt_key<\/code>) is given...<\/b><br \/>\r\n          this function will be used to generate the actual key from which the item will be retrieved and used as the key to store this item in <code>opt_objToExtend<\/code>.  In other words <code class=\"language-javascript nowrap\">opt_objToExtend[opt_key.call(opt_objToExtend, item, arrOrObj)]<\/code> is what will be used to store the item in each iteration.  If this function returns <code>undefined<\/code> or a key which resolves to an undefined key then the iteration's item will be omitted.\r\n        <\/li>\r\n        <li>If not specified or <code class=\"language-javascript\">undefined<\/code> is given, eacn item in <code>arrOrObj<\/code> will be used to itself in the returned object (AKA <code>opt_objToExtend<\/code>).<\/li>\r\n      <\/ul>\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_indexAsArrays<\/code> {boolean=}:<\/b><br \/>\r\n      Optional.  Defaults to <code>false<\/code>.  If <code>true<\/code>, each item that is indexed in the returned object will be indexed within a array so that collisions will result in an array of more than one item.  If <code>false<\/code>, each item that is index in the returned object will be indexed as the found item, but in the case of multiple items resolving to the same index, only the last item will be found in the returned object.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_objToExtend<\/code> {?}:<\/b><br \/>\r\n      Optional.  Defaults to a new empty object (<code language=\"language-javascript\">{}<\/code>).  This will be the object that is modified and returned with the desired keys and values.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns <code>opt_objToExtend<\/code> (or a new object in the case that it wasn't specified) containing items from <code>arrOrObj<\/code> in the desired indices.<\/div>\r\n<\/div>","required_ids":{"20":"walk() - Traverse Array\/Object Values"},"tags":["Array","Object"],"variables":["indexBy"]});
storeSnippet({"id":123,"name":"isRegExpMatch() - Match RegExp Against Start of String or Entire String","description":"Determine whether or not a RegExp matches an entire string (or the start of a string).","js":"function isRegExpMatch(rgx, opt_str, opt_onlyCheckStart) {\r\n  rgx = RegExp(rgx.source + '|([\\\\S\\\\s])', (rgx + '').replace(\/[\\s\\S]+\\\/|g\/g, '') + 'g');\r\n  function f(str, opt_checkStartOnly) {\r\n    rgx.lastIndex = undefined;\r\n    opt_checkStartOnly = 1 in arguments ? opt_checkStartOnly : opt_onlyCheckStart;\r\n    var isMatch = false, match, keepGoing = 1;\r\n    while ((match = rgx.exec(str)) && keepGoing) {\r\n      isMatch = slice(match, -1)[0] == undefined;\r\n      keepGoing = isMatch && !opt_checkStartOnly;\r\n    }\r\n    return isMatch;\r\n  }\r\n  return opt_str == undefined ? f : f(opt_str, opt_onlyCheckStart);\r\n}","post":"<h2><code>isRegExpMatch(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Determine whether or not a RegExp matches an entire string (or the start of a string).<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><b><code>rgx<\/code> {RegExp}:<\/b><br \/>The regular expression to be used.<\/li>\r\n    <li><b><code>opt_str<\/code> {string}:<\/b><br \/>Optional.  If specified, <code>rgx<\/code> will be matched against the string to see if the string regular expression matches from the beginning.  If not specified, a function will be returned that will be used to match against <code>rgx<\/code> whenever it is called.<\/li>\r\n    <li><b><code>opt_onlyCheckStart<\/code> {boolean}:<\/b><br \/>Optional.  Defaults to <code class=\"language-javascript\">false<\/code>.  If <code class=\"language-javascript\">true<\/code>, <code>rgx<\/code> must only match the beginning of <code>opt_str<\/code>.  If <code class=\"language-javascript\">false<\/code>, <code>rgx<\/code> must match the entire string <code>opt_str<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>If <code>opt_str<\/code> is given and is not <code class=\"language-javascript\">null<\/code> or <code class=\"language-javascript\">undefined<\/code>, a boolean will be returned.  If<code>opt_onlyCheckStart<\/code> is <code class=\"language-javascript\">true<\/code>-ish the value returned will indicate if <code>rgx<\/code> simply matched from the beginning of <code>opt_str<\/code>.  If <code>opt_onlyCheckStart<\/code> is <code class=\"language-javascript\">false<\/code>-ish, the value returned will indicate if <code>rgx<\/code> matched all of <code>opt_str<\/code>.   If <code>opt_str<\/code> is not given or <code class=\"language-javascript\">null<\/code> or <code class=\"language-javascript\">undefined<\/code> a function to match against <code>rgx<\/code> will be returned:\r\n    <ul>\r\n      <li><b>Argument 1 - <code>str<\/code> {string}:<\/b><br \/>The string to match against <code>rgx<\/code>.<\/li>\r\n      <li><b>Argument 2 - <code>opt_checkStartOnly<\/code> {boolean}:<\/b><br \/>Optional.  Defaults to <code>opt_onlyCheckStart<\/code>.  If <code class=\"language-javascript\">true<\/code>, <code>rgx<\/code> will only need to match from the start of <code>str<\/code>.  If <code class=\"language-javascript\">false<\/code>, <code>rgx<\/code> will have to match the entire string <code>str<\/code>.<\/li>\r\n      <li><b>Returns {boolean}:<\/b><br \/><code class=\"language-javascript\">true<\/code> is returned if <code>rgx<\/code> matches <code>str<\/code> as specified by <code>opt_checkStartOnly<\/code>.  Otherwise <code class=\"language-javascript\">false<\/code> is returned.<\/li>\r\n    <\/ul>Returns an array with two values:  the string found before <code>target<\/code> and the string found after <code>target<\/code>.  If target was not found or the specified occurrence (<code>opt_occurrence<\/code>) of <code>target<\/code> was not found, <code class=\"language-javascript\">[null, null]<\/code> will be returned.<\/div>\r\n  \r\n  <h3>Examples<\/h3>\r\n  <pre class=\"language-javascript\"><code>var isDigits = YourJS.isRegExpMatch(\/\\d\/),\r\n    isHexDigits = YourJS.isRegExpMatch(\/[\\dA-F]\/i),\r\n    isDigit = YourJS.isRegExpMatch(\/\\d\/, null, true),\r\n    isHexDigit = YourJS.isRegExpMatch(\/[\\dA-F]\/, undefined, true);\r\n\r\n\/*** Test Base isRegExpMatch() ***\/\r\nconsole.log(YourJS.isRegExpMatch(\/\\w\/, 'Howdy'));         \/\/ -> true\r\nconsole.log(YourJS.isRegExpMatch(\/\\w\/, 'Howdy!'));        \/\/ -> false\r\nconsole.log(YourJS.isRegExpMatch(\/\\w\/, 'Howdy!', true));  \/\/ -> true\r\nconsole.log(YourJS.isRegExpMatch(\/\\w\/, '*Howdy!', true)); \/\/ -> false\r\n\r\n\/*** Test isDigits(): Defaults to checking all characters ***\/\r\nconsole.log(isDigits(''));                                \/\/ -> false\r\nconsole.log(isDigits('3'));                               \/\/ -> true\r\nconsole.log(isDigits('35'));                              \/\/ -> true\r\nconsole.log(isDigits('3.5'));                             \/\/ -> false\r\nconsole.log(isDigits('3.5', true));                       \/\/ -> true\r\n\r\n\/*** Test isHexDigits(): Defaults to checking all characters ***\/\r\nconsole.log(isHexDigits(''));                             \/\/ -> false\r\nconsole.log(isHexDigits('D'));                            \/\/ -> true\r\nconsole.log(isHexDigits('f2'));                           \/\/ -> true\r\nconsole.log(isHexDigits('ej'));                           \/\/ -> false\r\nconsole.log(isHexDigits('ej', true));                     \/\/ -> true\r\n\r\n\/*** Test isDigit(): Defaults to only checking the beginning ***\/\r\nconsole.log(isDigit(''));                                \/\/ -> false\r\nconsole.log(isDigit('3'));                               \/\/ -> true\r\nconsole.log(isDigit('35'));                              \/\/ -> true\r\nconsole.log(isDigit('3.5'));                             \/\/ -> true\r\nconsole.log(isDigit('3.5', false));                       \/\/ -> false\r\n\r\n\/*** Test isHexDigit(): Defaults to only checking the beginning ***\/\r\nconsole.log(isHexDigit(''));                             \/\/ -> false\r\nconsole.log(isHexDigit('D'));                            \/\/ -> true\r\nconsole.log(isHexDigit('f2'));                           \/\/ -> true\r\nconsole.log(isHexDigit('ej'));                           \/\/ -> true\r\nconsole.log(isHexDigit('ej', false));                    \/\/ -> false<\/code><\/pre>\r\n<\/div>","required_ids":{},"tags":["RegExp","String"],"variables":["isRegExpMatch"]});
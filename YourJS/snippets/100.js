storeSnippet({"id":100,"name":"unnest() - Flatten Nested Structures","description":"Flatten a nested structure by representing the descendants in one array or object.","js":"function unnest(arrOrObj, fn, opt_initial, opt_skipRecursives) {\r\n  var initialIsArray = typeOf(opt_initial = opt_initial || (isArrayLike(arrOrObj) ? [] : {}), 'Array');\r\n  function add(valueToAdd, opt_index) {\r\n    if (opt_index == undefined && initialIsArray) {\r\n      opt_initial.push(valueToAdd);\r\n    }\r\n    else {\r\n      opt_initial[opt_index] = valueToAdd;\r\n    }\r\n  }\r\n  function helper(parent, path, seen, seenCount) {\r\n    var newPath;\r\n    seen = [parent].concat(seen);\r\n    seenCount++;\r\n    function recurse(value) {\r\n      for (var i = seenCount; i--;) {\r\n        if (seen[i] === value) {\r\n          if (opt_skipRecursives) {\r\n            return;\r\n          }\r\n          throw new Error('Cannot unnest recursive, nested structures.');\r\n        }\r\n      }\r\n      helper(value, newPath, seen, seenCount);\r\n    }\r\n    walk(parent, function(value, index) {\r\n      fn(value, index, add, recurse, parent, newPath = path.concat([index]), arrOrObj);\r\n    });\r\n  }\r\n  helper(arrOrObj, [], [], 0);\r\n  return opt_initial;\r\n}","post":" ","required_ids":{"20":"walk() - Traverse Array\/Object Values","81":"isArrayLike() & toArray()"},"tags":["Array","Object"],"variables":["unnest"]});
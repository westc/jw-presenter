storeSnippet({"id":117,"name":"Substrings Around A Target","description":"Find the substrings before and after a specific target.","js":"'around before after'.replace(\/\\w+\/g, function(name, i) {\r\n  YourJS[name] = function(subject, target, opt_occurrence) {\r\n    var ret, args, indices = [];\r\n    opt_occurrence = parseInt(opt_occurrence || 1, 10);\r\n    target = (typeOf(target, 'RegExp') ? flagRegExp : quoteRegExp)(target, 'g');\r\n    subject.replace(target, function(match, i) {\r\n      args = arguments;\r\n      indices.push([i = args[args.length - 2], match.length + i]);\r\n    });\r\n    ret = (indices = indices[opt_occurrence + (opt_occurrence > 0 ? -1 : indices.length)])\r\n      ? [subject.slice(0, indices[0]), subject.slice(indices[1])]\r\n      : [null, null];\r\n    return i ? ret[i \/ 7 - 1] : ret;\r\n  };\r\n});","post":"<h2><code>around(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Finds the substrings around a specific target.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>subject<\/code> {string}:<br \/>The string to search.<\/li>\r\n    <li><code>target<\/code> {string|RegExp}:<br \/>The target to find and key off of within <code>subject<\/code>.<\/li>\r\n    <li><code>opt_occurrence<\/code> {number}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">1<\/code>.  The occurrence of <code>target<\/code> that you want to key off of within <code>subject<\/code>.  If negative, the occurrence will be counted from the end of <code>subject<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns an array with two values:  the string found before <code>target<\/code> and the string found after <code>target<\/code>.  If target was not found or the specified occurrence (<code>opt_occurrence<\/code>) of <code>target<\/code> was not found, <code class=\"language-javascript\">[null, null]<\/code> will be returned.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.around('a,b,c,d', ','));       \/\/ -> ['a', 'b,c,d']\r\nconsole.log(YourJS.around('a,b,c,d', ',', 2));    \/\/ -> ['a,b', 'c,d']\r\nconsole.log(YourJS.around('a,b,c,d', ',', 3));    \/\/ -> ['a,b,c', 'd']\r\nconsole.log(YourJS.around('a,b,c,d', ',', 4));    \/\/ -> [null, null]\r\nconsole.log(YourJS.around('a,b,c,d', ',', -1));   \/\/ -> ['a,b,c', 'd']\r\nconsole.log(YourJS.around('a,b,c,d', \/^|,\/, -1)); \/\/ -> ['a,b,c', 'd']\r\nconsole.log(YourJS.around('a,b,c,d', \/^|,\/, -4)); \/\/ -> ['', 'a,b,c,d']\r\nconsole.log(YourJS.around('a,b,c,d', \/^|,\/, -5)); \/\/ -> [null, null]<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>before(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Finds the substring before a specific target.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>subject<\/code> {string}:<br \/>The string to search.<\/li>\r\n    <li><code>target<\/code> {string|RegExp}:<br \/>The target to find and key off of within <code>subject<\/code>.<\/li>\r\n    <li><code>opt_occurrence<\/code> {number}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">1<\/code>.  The occurrence of <code>target<\/code> that you want to key off of within <code>subject<\/code>.  If negative, the occurrence will be counted from the end of <code>subject<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the string found before <code>target<\/code>.  If target was not found or the specified occurrence (<code>opt_occurrence<\/code>) of <code>target<\/code> was not found, <code class=\"language-javascript\">null<\/code> will be returned.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.before('a,b,c,d', ','));       \/\/ -> 'a'\r\nconsole.log(YourJS.before('a,b,c,d', ',', 2));    \/\/ -> 'a,b'\r\nconsole.log(YourJS.before('a,b,c,d', ',', 3));    \/\/ -> 'a,b,c'\r\nconsole.log(YourJS.before('a,b,c,d', ',', 4));    \/\/ -> null\r\nconsole.log(YourJS.before('a,b,c,d', ',', -1));   \/\/ -> 'a,b,c'\r\nconsole.log(YourJS.before('a,b,c,d', \/^|,\/, -1)); \/\/ -> 'a,b,c'\r\nconsole.log(YourJS.before('a,b,c,d', \/^|,\/, -4)); \/\/ -> ''\r\nconsole.log(YourJS.before('a,b,c,d', \/^|,\/, -5)); \/\/ -> null<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>after(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Finds the substring after a specific target.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>subject<\/code> {string}:<br \/>The string to search.<\/li>\r\n    <li><code>target<\/code> {string|RegExp}:<br \/>The target to find and key off of within <code>subject<\/code>.<\/li>\r\n    <li><code>opt_occurrence<\/code> {number}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">1<\/code>.  The occurrence of <code>target<\/code> that you want to key off of within <code>subject<\/code>.  If negative, the occurrence will be counted from the end of <code>subject<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the string found after <code>target<\/code>.  If target was not found or the specified occurrence (<code>opt_occurrence<\/code>) of <code>target<\/code> was not found, <code class=\"language-javascript\">null<\/code> will be returned.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.after('a,b,c,d', ','));       \/\/ -> 'b,c,d'\r\nconsole.log(YourJS.after('a,b,c,d', ',', 2));    \/\/ -> 'c,d'\r\nconsole.log(YourJS.after('a,b,c,d', ',', 3));    \/\/ -> 'd'\r\nconsole.log(YourJS.after('a,b,c,d', ',', 4));    \/\/ -> null\r\nconsole.log(YourJS.after('a,b,c,d', ',', -1));   \/\/ -> 'd'\r\nconsole.log(YourJS.after('a,b,c,d', \/^|,\/, -1)); \/\/ -> 'd'\r\nconsole.log(YourJS.after('a,b,c,d', \/^|,\/, -4)); \/\/ -> 'a,b,c,d'\r\nconsole.log(YourJS.after('a,b,c,d', \/^|,\/, -5)); \/\/ -> null<\/code><\/pre>\r\n<\/div>","required_ids":{"27":"quoteRegExp() - Escaping RegExp Metacharacters","28":"flagRegExp() - Modify RegExp Flags"},"tags":["RegExp","String"],"variables":["after","around","before"]});
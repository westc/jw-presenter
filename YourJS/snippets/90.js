storeSnippet({"id":90,"name":"inherit() - Basic Prototypal Inheritance","description":"Create sub-classes that inherit from a specified base case.","js":"function inherit(subClass, baseClass, opt_prototype) {\r\n  function SurrogateClass(){}\r\n  SurrogateClass.prototype = baseClass.prototype;\r\n  extend(subClass.prototype = new SurrogateClass(), { constructor: subClass, superClass: baseClass }, Object(opt_prototype));\r\n  return subClass;\r\n}","post":"<h2><code>inherit(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <div>Create sub-classes that inherit from a specified base case.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>subClass<\/code> {Function}:<\/b><br \/>\r\n      The class that will inherit from the base class and whose prototype can optionally be extended.\r\n    <\/li>\r\n    <li>\r\n      <b><code>baseClass<\/code> {Function}:<\/b><br \/>\r\n      The class from which <code>subClass<\/code> will inherit its prototype values.  This will also be assigned as <code class=\"language-javascript\">subClass.prototype.superClass<\/code>.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_prototype<\/code> {Object}:<\/b><br \/>\r\n      Optional.  If specified the properties will be assigned to <code class=\"language-javascript\">subClass.prototype.superClass<\/code>.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>The sub-class passed in, but with the base class and the prototypes setup.<\/div>\r\n<\/div>","required_ids":{},"tags":["Class","Function","Prototype"],"variables":["inherit"]});
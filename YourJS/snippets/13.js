storeSnippet({"id":13,"name":"rearg() - Rewriting Arguments","description":"Reorganize or even rewrite arguments before they are passed into your function.","js":"function rearg(fn, index0_or_argGetter) {\r\n  if (!typeOf(index0_or_argGetter, 'Function')) {\r\n    for (var keys = slice(arguments, 1), keysLen = keys.length, i = 0, key; key = keys[i], i < keysLen; i++) {\r\n      keys[i] = ((\/^(this|-?\\d+)(?=\\.|$)\/.test(key) ? '' : 'this.') + key).split('.');\r\n    }\r\n\r\n    index0_or_argGetter = function(arg, argIndex, args, key, i, l, j) {\r\n      if (argIndex < keysLen && (key = keys[argIndex])) {\r\n        if (j = key[0]) {\r\n          arg = j == 'this' ? this : slice(args, j, +j+1)[0];\r\n          for (i = 1, l = key.length; j = key[i], i++ < l;) {\r\n            arg = arg\r\n                ? (typeOf(arg, 'Array') && \/^-?\\d+$\/.test(j))\r\n                  ? arg.slice(j, +j+1)[0]\r\n                  : arg[j]\r\n                : arg;\r\n          }\r\n        }\r\n      }\r\n      return arg;\r\n    };\r\n  }\r\n\r\n  return function() {\r\n    for (var args = arguments, arrArgs = [], i = Math.max(args.length, keysLen||0); i--;) {\r\n      arrArgs[i] = index0_or_argGetter.call(this, args[i], i, args);\r\n    }\r\n    return fn.apply(this, arrArgs);\r\n  }\r\n}","post":"Recently I have been looking into expanding the horizons of YourJS a bit so that it can also offer functionality similar to what is available in other JS utility libraries.  I was looking over some of the functions available in lodash.  One of the functions that caught my eye was `rearg()` which is used for reordering the arguments before calling the original function.  This can come in handy when combining with `YourJS.partial()` and perhaps something like `YourJS.set()` or `YourJS.get()` to make generic getters and setters.\r\n\r\n<h2>Parameters<\/h2>\r\n<ol>\r\n    <li>\r\n        <b><code>fn<\/code> {Function}:<\/b><br \/>\r\n        The function that will be called after reordering the arguments.\r\n    <\/li>\r\n    <li>\r\n        <b><code>index0_or_argGetter<\/code> {...number|...string|Function}:<\/b><br \/>\r\n        This can either be many parameters (numbers or strings) or just one as shown by the three possibilities below:\r\n        <ul>\r\n            <li>\r\n                <b><code>...indices<\/code> {number}:<\/b><br \/>\r\n                If one or more numbers are specified each number should correspond to the index of the argument that should be in that corresponding place.  For example:  <code>YourJS.rearg(fn, 2, 1, 0)<\/code> would change <code>fn('a', 'b', 'c')<\/code> to <code>fn('c', 'b', 'a')<\/code>\r\n            <\/li>\r\n            <li>\r\n                <b><code>...indices<\/code> {string}:<\/b><br \/>\r\n                If one or more strings are specified each string should correspond to a path of the argument that should be in the corresponding place.  If a path starts off with a non-digit and is not <code>\"this\"<\/code>, it will refer to a path in the context object (<code>this<\/code>).  For example:  <code>YourJS.rearg(fn, 'firstName', 'lastName', 'age', 'this')<\/code> would change <code>fn.call(ctx)<\/code> to <code>fn.call(ctx, ctx.firstName, ctx.lastName, ctx.age, ctx)<\/code>\r\n            <\/li>\r\n            <li>\r\n                <b><code>argGetter<\/code> {function(value, index, args)}:<\/b><br \/>\r\n                If a function is specified it will be used to come up with the modified values of the arguments.  It will be passed the <code>index<\/code>, <code>value<\/code> and the original <code>arguments<\/code>.  It should return the value to be used in that argument position.\r\n            <\/li>\r\n        <\/ul>\r\n    <\/li>\r\n<\/ol>\r\n\r\n<h2>Returns<\/h2>\r\nA new function is returned that will reorder the arguments before calling the original `fn` function.","required_ids":{},"tags":["Function"],"variables":["rearg"]});
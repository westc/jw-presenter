storeSnippet({"id":5,"name":"limit() - Limiting Function Calls","description":"Creates a new copy of the function passed in which can only be called a limited amount of times.","js":"function limit(fn, opt_callLimit, opt_throwError) {\r\n  opt_callLimit = opt_callLimit == undefined ? 1 : opt_callLimit;\r\n  return function() {\r\n    if (0 < opt_callLimit--) {\r\n      return fn.apply(this, arguments);\r\n    }\r\n    if (opt_throwError) {\r\n      throw new Error('Limited function called too many times.');\r\n    }\r\n  }\r\n}","post":"At times when dealing with functions that will be bound to an element you may need to prevent that function from being run multiple times.  In order to do that you could use a JavaScript library such as jQuery and bind the function with the `jQuery#one` function.  Of course, if you want a stripped down library that only has this and other functions that you or other devs write, you can add this `YourJS` snippet to your build.\r\n\r\n<h2>Example<\/h2>\r\nNow that we have the definition for this <code>limit<\/code> function we can learn how to use it by example:\r\n```javascript\r\n\/\/ Encapsulate data so the user cant cheat.\r\n(function() {\r\n  \/\/ Function to greet the user.\r\n  var sayHello = limit(function(name) {\r\n    alert('Hello ' + name + '!!!');\r\n  });\r\n\r\n  \/\/ Ask for the user's name.\r\n  var userName = prompt('What is your name?', 'user');\r\n\r\n  \/\/ Greet the user.\r\n  sayHello(userName);\r\n\r\n  \/\/ Try greeting the user again... this should fail.\r\n  sayHello(userName);\r\n\r\n  \/\/ Generate a random number from 1 to 10.\r\n  var randomNumber = parseInt(Math.random() * 10) + 1;\r\n  \r\n  \/\/ A function which will only allow the user to make 3 guesses.  After\r\n  \/\/ 3 guesses, subsequent calls will cause an error to be thrown.\r\n  var makeGuess = limit(function(previousGuess) {\r\n    return prompt('Guess a number between 1 and 10:', previousGuess);\r\n  }, 3, true);\r\n  \r\n  \/\/ Play the guessing game.\r\n  var guess = '';\r\n  try {\r\n    while(+(guess = makeGuess(guess)) != randomNumber) {\r\n      if(guess &lt; randomNumber) {\r\n        alert('Nope, it is higher than that.');\r\n      }\r\n      else {\r\n        alert('Nope, it is lower than that.');\r\n      }\r\n    }\r\n    alert('You got it!!!');\r\n  }\r\n  catch(e) {\r\n    alert('Unfortunately you hit your limit.\\n'\r\n      + 'The number I was thinking of was ' + randomNumber + '.');\r\n  }\r\n})();\r\n```\r\n\r\nYou can <a href=\"javascript:(function()%7Bfunction%20c(a,b,d)%7Bb=b%7C%7C1;return%20function()%7Bif(0%3Cb--)return%20a.apply(this,arguments);var%20c=Error(%22limit%20exceeded%22);if(d)throw%20c;return%20c%7D%7Dvar%20a=c(function(a)%7Balert(%22Hello%20%22+a+%22!!!%22)%7D),b=prompt(%22What%20is%20your%20name?%22,%22user%22);a(b);a(b);var%20a=parseInt(10*Math.random())+1,b=c(function(a)%7Breturn%20prompt(%22Guess%20a%20number%20between%201%20and%2010:%22,a)%7D,3,!0),d=%22%22;try%7Bfor(;+(d=b(d))!=a;)d%3Ca?alert(%22Nope,%20it%20is%20higher%20than%20that.%22):alert(%22Nope,%20it%20is%20lower%20than%20that.%22);alert(%22You%20got%20it!!!%22)%7Dcatch(e)%7Balert(%22Unfortunately%20you%20hit%20your%20limit.%5CnThe%20number%20I%20was%20thinking%20of%20was%20%22+a+%22.%22)%7D%7D)()\">click here<\/a> to see the result of running the two preceeding blocks of code. Note that the greeting only appears once, even though it is in the code twice.  Also notice that the try-catch clause is used to determine when the user tries to make another guess but the maximum amount of guesses have already been made.\r\n\r\n<h2>Function Description<\/h2>\r\nThis <code>limit<\/code> function creates a new copy of the function passed in which can only be called a limited amount of times.\r\n\r\n<h2>Parameters<\/h2>\r\n<ol>\r\n<li><code><u><b>fn<\/b> {Function}<\/u><\/code>:<br \/>The function which will only be called a limited amount of times.<\/li>\r\n<li><code><u><b>opt_callLimit<\/b> {number}<\/u><\/code>:<br \/>Optional.  Defaults to 1.  The maximum amount of times the returned wrapper function can be called before producing an error.<\/li>\r\n<li><code><u><b>opt_throwError<\/b> {boolean}<\/u><\/code>:<br \/>Optional.  Defaults to false.  If true is specified an error will be thrown if the amount of calls is exceeded.  Otherwise the error will simply be returned.<\/li>\r\n<\/ol>\r\n\r\n<h2>Returns<\/h2>\r\nReturns a new wrapper function so that the context and the parameters passed to this wrapper function will be passed to <code>fn<\/code> iff <code>opt_callLimit<\/code> hasn't been exceeded.\r\n\r\n<h2>Final Notes<\/h2>\r\nPersonally I would think this is most useful for event handling but if you have anymore uses for it please let us know.","required_ids":{},"tags":["Function"],"variables":["limit"]});
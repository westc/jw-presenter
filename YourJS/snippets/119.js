storeSnippet({"id":119,"name":"and() & or() & xor()","description":"Determine the result of using AND, OR, or XOR on an array of values.","js":"'xor ^ &&a)&&(b|| ! and & &&  or | ||  '\r\n  .replace(\/(.+?) (.) (.+?) (.?) \/g, function(m, name, op, ops, op2) {\r\n    YourJS[name] = Function(\r\n      'c,g',\r\n      'for(var e=1,f=c.length,a=c[0],b=a;e<f;a=c[e++],b=g?b@a:@(b@a));return b'\r\n        .replace('@', op)\r\n        .replace('@', op2)\r\n        .replace('@', ops)\r\n    );\r\n  });","post":"<h2><code>and(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Determine the result of executing AND on an array of values.  Defaults to logical calculations but bitwise calculations are also possible.<br \/><b>NOTE:<\/b>  Short-circuit evaluation is never used.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>values<\/code> {Array}:<br \/>Array of the values to AND together.<\/li>\r\n    <li><code>opt_bitwise<\/code> {boolean}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">false<\/code>.  If <code class=\"language-javascript\">true<\/code>ish, logical <code>AND<\/code> will be used, otherwise, bitwise <code>AND<\/code> will be used.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the result of executing AND on everything with the <code>values<\/code> array.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>\/*** Logical AND ***\/\r\nconsole.log(YourJS.and([]));                 \/\/ -> undefined\r\nconsole.log(YourJS.and([false]));            \/\/ -> false\r\nconsole.log(YourJS.and([true]));             \/\/ -> true\r\nconsole.log(YourJS.and(['No']));             \/\/ -> 'No'\r\nconsole.log(YourJS.and(['',true]));          \/\/ -> ''\r\nconsole.log(YourJS.and(['Yes',true,4]));     \/\/ -> 4\r\n\r\n\/*** Bitwise AND ***\/\r\nconsole.log(YourJS.and([], true));           \/\/ -> undefined\r\nconsole.log(YourJS.and([0], true));          \/\/ -> 0\r\nconsole.log(YourJS.and([1], true));          \/\/ -> 1\r\nconsole.log(YourJS.and([1,2], true));        \/\/ -> 0\r\nconsole.log(YourJS.and([7,14], true));       \/\/ -> 6\r\nconsole.log(YourJS.and([14,7], true));       \/\/ -> 6\r\nconsole.log(YourJS.and([15,14,5], true));    \/\/ -> 4\r\nconsole.log(YourJS.and([false], true));      \/\/ -> false\r\nconsole.log(YourJS.and([true], true));       \/\/ -> true\r\nconsole.log(YourJS.and([false,true], true)); \/\/ -> 0\r\nconsole.log(YourJS.and([true,false], true)); \/\/ -> 0\r\nconsole.log(YourJS.and([true,true], true));  \/\/ -> 1<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>or(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Determine the result of executing OR on an array of values.  Defaults to logical calculations but bitwise calculations are also possible.<br \/><b>NOTE:<\/b>  Short-circuit evaluation is never used.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>values<\/code> {Array}:<br \/>Array of the values to OR together.<\/li>\r\n    <li><code>opt_bitwise<\/code> {boolean}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">false<\/code>.  If <code class=\"language-javascript\">true<\/code>ish, logical <code>OR<\/code> will be used, otherwise, bitwise <code>OR<\/code> will be used.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the result of executing OR on everything with the <code>values<\/code> array.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>\/*** Logical OR ***\/\r\nconsole.log(YourJS.or([]));                             \/\/ -> undefined\r\nconsole.log(YourJS.or([false]));                        \/\/ -> false\r\nconsole.log(YourJS.or([true]));                         \/\/ -> true\r\nconsole.log(YourJS.or(['Bubble']));                     \/\/ -> 'Bubble'\r\nconsole.log(YourJS.or([false,true]));                   \/\/ -> true\r\nconsole.log(YourJS.or([true,false]));                   \/\/ -> true\r\nconsole.log(YourJS.or([false,true,false]));             \/\/ -> true\r\nconsole.log(YourJS.or([true,false,true]));              \/\/ -> true\r\nconsole.log(YourJS.or([true,false,true,false]));        \/\/ -> true\r\nconsole.log(YourJS.or([true,0,true,false,'Yes']));      \/\/ -> true\r\n\r\n\/*** Bitwise OR ***\/\r\nconsole.log(YourJS.or([], true));                       \/\/ -> undefined\r\nconsole.log(YourJS.or([0], true));                      \/\/ -> 0\r\nconsole.log(YourJS.or([1], true));                      \/\/ -> 1\r\nconsole.log(YourJS.or([0,1], true));                    \/\/ -> 1\r\nconsole.log(YourJS.or([1,0], true));                    \/\/ -> 1\r\nconsole.log(YourJS.or([1,0,2], true));                  \/\/ -> 3\r\nconsole.log(YourJS.or([1,0,2,5], true));                \/\/ -> 7\r\nconsole.log(YourJS.or([0,2,5,true,false,false], true)); \/\/ -> 7<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>xor(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Determine the result of executing XOR on an array of values.  Defaults to logical calculations but bitwise calculations are also possible.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>values<\/code> {Array}:<br \/>Array of the values to XOR together.<\/li>\r\n    <li><code>opt_bitwise<\/code> {boolean}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">false<\/code>.  If <code class=\"language-javascript\">true<\/code>ish, logical <code>XOR<\/code> will be used, otherwise, bitwise <code>XOR<\/code> will be used.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the result of executing XOR on everything with the <code>values<\/code> array.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>\/*** Logical XOR ***\/\r\nconsole.log(YourJS.xor([]));                               \/\/ -> undefined\r\nconsole.log(YourJS.xor([false]));                          \/\/ -> false\r\nconsole.log(YourJS.xor([true]));                           \/\/ -> true\r\nconsole.log(YourJS.xor(['Bubble']));                       \/\/ -> 'Bubble'\r\nconsole.log(YourJS.xor([false,true]));                     \/\/ -> true\r\nconsole.log(YourJS.xor([true,false]));                     \/\/ -> true\r\nconsole.log(YourJS.xor([false,true,false]));               \/\/ -> true\r\nconsole.log(YourJS.xor([true,false,true]));                \/\/ -> false\r\nconsole.log(YourJS.xor([true,false,true,false]));          \/\/ -> false\r\nconsole.log(YourJS.xor([true,false,false,true]));          \/\/ -> false\r\nconsole.log(YourJS.xor([true,false,false,true,true]));     \/\/ -> true\r\nconsole.log(YourJS.xor([true,false,true,false,true]));     \/\/ -> true\r\nconsole.log(YourJS.xor([true,0,true,false,'Yes']));        \/\/ -> 'Yes'\r\n\r\n\/*** Bitwise XOR ***\/\r\nconsole.log(YourJS.xor([], true));                         \/\/ -> undefined\r\nconsole.log(YourJS.xor([0], true));                        \/\/ -> 0\r\nconsole.log(YourJS.xor([1], true));                        \/\/ -> 1\r\nconsole.log(YourJS.xor([0,1], true));                      \/\/ -> 1\r\nconsole.log(YourJS.xor([1,0], true));                      \/\/ -> 1\r\nconsole.log(YourJS.xor([1,0,2], true));                    \/\/ -> 3\r\nconsole.log(YourJS.xor([1,0,2,5], true));                  \/\/ -> 6\r\nconsole.log(YourJS.xor([1,0,2,5,true,false,false], true)); \/\/ -> 7<\/code><\/pre>\r\n<\/div>","required_ids":{},"tags":["Array","Boolean","Number"],"variables":["and","or","xor"]});
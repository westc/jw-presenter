storeSnippet({"id":6,"name":"css() - Embedding Stylesheets in JS","description":"Creates a CSS stylesheet from an JSON representation of a stylesheet.","js":"var css;\r\n(function(\r\n  document,\r\n  RGX_UPPER,\r\n  RGX_AMP,\r\n  RGX_NO_COMMAS_OR_NOTHING,\r\n  RGX_NO_AMP,\r\n  RGX_IND_SEL,\r\n  RGX_CLS,\r\n  RGX_TRIM_SELS,\r\n  undefined\r\n) {\r\n  css = function(obj, selAncestors) {\r\n    if (typeof selAncestors != 'string') {\r\n      if (selAncestors) {\r\n        var className = ('_' + Math.random()).replace(RGX_CLS, +new Date);\r\n        selAncestors = typeOf(selAncestors, 'Array')\r\n          ? selAncestors\r\n          : [selAncestors];\r\n        for (var i = selAncestors.length; i--;) {\r\n          selAncestors[i].className += ' ' + className;\r\n        }\r\n      }\r\n      selAncestors = className ? '.' + className : '';\r\n    }\r\n\r\n    var code = getCssCode(obj, selAncestors);\r\n    var style = document.createElement('style');\r\n    style.type = 'text\/css';\r\n    if (style.styleSheet && !style.sheet) {\r\n      style.styleSheet.cssText = code;\r\n    }\r\n    else {\r\n      style.appendChild(document.createTextNode(code));\r\n    }\r\n    (document.getElementsByTagName('head')[0] || document.body).appendChild(style);\r\n    return style;\r\n  }\r\n\r\n  function getCssCode(obj, selAncestors) {\r\n    var rules = [];\r\n    var rule = [];\r\n    for (var key in obj) {\r\n      if (has(obj, key)) {\r\n        var value = obj[key];\r\n        var typeName = typeOf(value);\r\n        if (!key.indexOf('@media ')) {\r\n          rules.push(key + '{' + getCssCode(value, selAncestors) + '}');\r\n        }\r\n        else if (typeName == 'Object') {\r\n          \/\/ Trim selectors\r\n          key = key.replace(RGX_TRIM_SELS, '$1');\r\n          \/\/ Return all selectors\r\n          key = key.replace(RGX_IND_SEL, function(sel) {\r\n            sel = selAncestors ? sel.replace(RGX_NO_AMP, '& $&') : sel;\r\n            return selAncestors.replace(RGX_NO_COMMAS_OR_NOTHING, function(selAncestor) {\r\n              return sel.replace(RGX_AMP, selAncestor);\r\n            });\r\n          });\r\n          rules.push(getCssCode(value, key));\r\n        }\r\n        else {\r\n          value = typeName != 'Array'\r\n            ? value != undefined\r\n              ? value && typeof value == 'number'\r\n                ? value + 'px'\r\n                : ((value + '').slice(-1) == '!' ? value + 'important' : value)\r\n              : 'none'\r\n            : value.join(',');\r\n          key = key.replace(RGX_UPPER, '-$&').toLowerCase();\r\n          rule.push(key + ':' + value + ';');\r\n        }\r\n      }\r\n    }\r\n    if (rule[0]) {\r\n        rules.unshift(selAncestors + '{' + rule.join('') + '}');\r\n    }\r\n    return rules.join('');\r\n  }\r\n})(\r\n  document,\r\n  \/[A-Z]\/g,\r\n  \/&\/g,\r\n  \/[^,]+|^$\/g,\r\n  \/^[^&]+$\/,\r\n  \/[^\\s\\xa0,][^,]*\/g,\r\n  \/0(.|$)\/,\r\n  \/^[\\s\\xa0]+|[\\s\\xa0]*(,)[\\s\\xa0]*|[\\s\\xa0]+$\/g\r\n);","post":"One of the cool things about JS is that you can do almost anything with it! The only thing is that you need to have the tools to get that \u00e2\u20ac\u0153anything\u00e2\u20ac\u009d job done. Recently, I had the desire to embed HTML, CSS, and JS all in one file that would be loaded when a specific browser event fired. The common solution is to use a library such as jQuery to load an HTML snippet but I wanted a different solution. I was thinking it would be great to be able to do something like this:\r\n```javascript\r\ncss({\r\n  'div.special-1, span.special-2': {\r\n    fontFamily: 'Trebuchet MS',\r\n    a: {\r\n      textDecoration: null,\r\n      '&:link, &:visited': { color: '#08F' },\r\n      '&:hover, &:active': { color: 'red' }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nHaving this resulting in a stylesheet added to the `HEAD` with the following CSS:\r\n```css\r\ndiv.special-1, span.special-2 {\r\n  font-family: Trebuchet MS;\r\n}\r\ndiv.special-1 a, span.special-2 a {\r\n  text-decoration: none;\r\n}\r\n\r\ndiv.special-1 a:link, span.special-2 a:link,\r\ndiv.special-1 a:visited, span.special-2 a:visited {\r\n  color: #08F;\r\n}\r\n\r\ndiv.special-1 a:hover, span.special-2 a:hover,\r\ndiv.special-1 a:active, span.special-2 a:active {\r\n  color: red;\r\n}\r\n```\r\n\r\nAfter a bit of work to make a few <a href=\"\" target=\"_blank\">Sass<\/a>-like features work, this YourJS snippet was born.\r\n\r\n<h2>Brief css(objStyles, opt_ancestors) Documentation<\/h2>\r\n<div style=\"padding: 0 30px 30px;\">\r\n    This function takes an object representing CSS rules and adds a stylesheet with those rules to the document.\r\n    <h3>Parameters<\/h3>\r\n    <ol>\r\n        <li>\r\n            <b>objStyles<\/b><br \/>\r\n            An object representing the CSS rules to be inserted into the document.\r\n            <ul>\r\n                <li>Property names will be used as media queries if they start with <code>\"@media \"<\/code>.<\/li>\r\n                <li>Property names will be used as rule selectors if the value is an object.<\/li>\r\n                <li>If a property name is to be used as a selector, if any selectors don't contain <code>&amp;<\/code>, <code>\"&amp; \"<\/code> will be prepended to it.<\/li>\r\n                <li>For all selectors, <code>&amp;<\/code> will be replaced recursively with the selectors found in the parent.<\/li>\r\n                <li>CSS property names will be uncamelcased by inserting dashes before each uppercased character and lower casing all characters.<\/li>\r\n                <li>If a value is <code>null<\/code> or <code>undefined<\/code>, it will be turned into <code>\"none\"<\/code>.<\/li>\r\n                <li>If a value is a number other than <code>0<\/code>, <code>\"px\"<\/code> will be appended to it.<\/li>\r\n                <li>If a value is an array all of the items will be concatenated together, using <code>\",\"<\/code> to delimit the values.<\/li>\r\n                <li>If a value ends with <code>!<\/code> it will be replaced with <code>\"!important\"<\/code>.<\/li>\r\n            <\/ul>\r\n        <\/li>\r\n        <li>\r\n            <b>opt_ancestors<\/b>\r\n            Optional.  This can be an element or an array of elements which will get another class added to target all rules to it and its children.  This can alternatively be a CSS path (selector) specifying the root on which all CSS rules created should be based.\r\n        <\/li>\r\n    <\/ol>\r\n    <h3>Returns<\/h3>\r\n    <div>The stylesheet that is created and appended to the document is returned.<\/div>\r\n<\/div>\r\n\r\n<h2>Future Development<\/h2>\r\nOne thing I would like to incorporate is the ability to have variables.  Another nice-to-have thing would be the ability to supply more options such as where the stylesheet should be inserted (if it will be inserted at all), pretty-print, and helper functions (eg. darken).  Feel free to leave a comment saying what other things may be nice to have.","required_ids":{},"tags":["Browser"],"variables":["css"]});
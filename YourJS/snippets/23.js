storeSnippet({"id":23,"name":"Set-like Arrays","description":"Get the ability to subtract, intersect or union arrays just like you can with sets.","js":"function subtract(array1, array2, opt_matchDups) {\r\n  array1 = slice(array1);\r\n  if (opt_matchDups) {\r\n    array2 = slice(array2);\r\n  }\r\n  for (var e1, i1 = 0, l1 = array1.length, i2, l2 = array2.length; i1 < l1; i1++) {\r\n    e1 = array1[i1];\r\n    for (i2 = 0; i2 < l2; i2++) {\r\n      if (e1 === array2[i2]) {\r\n        l1--;\r\n        array1.splice(i1--, 1);\r\n        if (opt_matchDups) {\r\n          l2--;\r\n          array2.splice(i2--, 1);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return array1;\r\n}\r\n\r\nfunction intersect(array1, array2) {\r\n  return subtract(array1, subtract(array1, array2, 1), 1);\r\n}\r\n\r\nfunction union(array1, array2) {\r\n  return array1.concat(subtract(array2, array1, 1));\r\n}","post":"jPaq provided three functions which treated arrays like sets:\r\n<ul>\r\n  <li><code>Array.prototype.subtract()<\/code><\/li>\r\n  <li><code>Array.prototype.intersect()<\/code><\/li>\r\n  <li><code>Array.prototype.union()<\/code><\/li>\r\n<\/ul>\r\n\r\nSince <b>YourJS<\/b> is here to replace jPaq, the above snippet basically provides the equivalent of those evil prototypal functions (haha).","required_ids":{},"tags":["Array"],"variables":["intersect","subtract","union"]});
storeSnippet({"id":126,"name":"compare() & sort()","description":"Compare primitive values and sort arrays.","js":"function compare(a, b) {\r\n  return a !== b ? a > b ? 1 : -1 : 0;\r\n}\r\n\r\nfunction sort(arr, opt_comparer, opt_valueProcessor) {\r\n  opt_comparer = opt_comparer || compare;\r\n  var arrPre = slice(arr);\r\n  if (opt_valueProcessor) {\r\n    for (var arr2 = [], l = arrPre.length, i = l; i--; ) {\r\n      arrPre[i] = { i: i, v: opt_valueProcessor(arrPre[i]) };\r\n    }\r\n    arrPre.sort(function(a, b) {\r\n      return opt_comparer.call(this, a.v, b.v);\r\n    });\r\n    ;\r\n    for (i = 0; i < l; i++) {\r\n      arr2[i] = arr[arrPre[i].i];\r\n    }\r\n    return arr2;\r\n  }\r\n  return slice(arr).sort(opt_comparer);\r\n}","post":"<h2><code>compare(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Compares one value to another by testing for strict-equality and then if a value is greater than the other.  This is mainly useful to provide a very primitive comparison function for the <code class=\"language-javascript\">sort()<\/code> function.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><b><code>value1<\/code> {*}:<\/b><br \/>The first value to be compared to <code>value2<\/code>.<\/li>\r\n    <li><b><code>value2<\/code> {*}:<\/b><br \/>The second value to be compared to <code>value1<\/code><\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns <code class=\"language-javascript\">0<\/code> if <code>value1<\/code> is strictly equal to <code>value2<\/code>.  Returns <code class=\"language-javascript\">1<\/code> if <code>value1<\/code> is greater than <code>value2<\/code>.  In all other cases <code class=\"language-javascript\">-1<\/code> is returned.<\/div>\r\n  \r\n  <h3>Examples<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.compare('', '3'));    \/\/ -> -1\r\nconsole.log(YourJS.compare('4', ''));    \/\/ -> 1\r\nconsole.log(YourJS.compare('5', '5'));   \/\/ -> 0\r\nconsole.log(YourJS.compare('a', 'A'));   \/\/ -> 1\r\nconsole.log(YourJS.compare('12', '4'));  \/\/ -> -1\r\nconsole.log(YourJS.compare('1', ['1'])); \/\/ -> -1<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>sort(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Sorts a shallow-copy of an array.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><b><code>array<\/code> {Array|Arguments}:<\/b><br \/>The array (or <code class=\"language-javascript\">arguments<\/code> object) to be copied and sorted.<\/li>\r\n    <li><b><code>opt_comparer<\/code> {<code class=\"language-javascript\">function(value1, value2): boolean<\/code>}:<\/b><br \/>Optional.  Defaults to <code class=\"language-javascript\">compare()<\/code>.  The function to be used to compare each value in the array and which will thusly determine the order of the values in the array.  The function will be called with 2 arguments.  The 1st argument will be a value pulled from one position in the array while the 2nd will be a value pulled from another position in the array.  When this function returns a negative value that will cause the 1st value to be placed before the 2nd value in the returned array.  When this function returns a positive value that will cause the 1st value to be placed after the 2nd value in the returned array.<\/li>\r\n    <li><b><code>opt_valueProcessor<\/code> {Function}:<\/b><br \/>Optional.  If specified this function will be used to process each value in <code>array<\/code> and the values returned from this function will be sent to the comparer function.  NOTE:  Although the values in the array will be processed by this function, the returned array will contain the original values found in <code>array<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns a shallow-copy of <code>array<\/code> sorted.<\/div>\r\n  \r\n  <h3>Examples<\/h3>\r\n  <pre class=\"language-javascript\"><code>var arr = [\r\n  { size: 4, name: 'C' },\r\n  { size: 2, name: 'a' },\r\n  { size: 1, name: 'B' }\r\n];\r\n\r\nconsole.log(sort(arr, function(a, b) {\r\n  return a.name < b.name\r\n    ? -1\r\n    : a.name == b.name\r\n      ? 0\r\n      : 1; \r\n}));  \/\/ -> [ { size: 1, name: \"B\" }, { size: 4, name: \"C\" }, { size: 2, name: \"a\" } ]\r\n\r\nconsole.log(sort(arr, function(a, b) {\r\n  return a.name.toUpperCase() < b.name.toUpperCase()\r\n    ? -1\r\n    : a.name.toUpperCase() == b.name.toUpperCase()\r\n      ? 0\r\n      : 1; \r\n}));  \/\/ -> [ { size: 2, name: \"a\" }, { size: 1, name: \"B\" }, { size: 4, name: \"C\" } ]\r\n\r\nconsole.log(sort(arr, undefined, function(item) {\r\n  return item.name.toUpperCase(); \r\n}));  \/\/ -> [ { size: 2, name: \"a\" }, { size: 1, name: \"B\" }, { size: 4, name: \"C\" } ]<\/code><\/pre>\r\n<\/div>","required_ids":{},"tags":["Array"],"variables":["compare","sort"]});
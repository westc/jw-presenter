storeSnippet({"id":118,"name":"Wrap & Unwrap Strings","description":"Surround a string or remove the surrounding substring.","js":"function wrap(str, opt_wrapper, opt_escape) {\r\n  opt_wrapper = toArray(opt_wrapper);\r\n  opt_escape = toArray(opt_escape);\r\n  var opt_lWrap = (opt_wrapper[0] || '\"') + '',\r\n      opt_rWrap = opt_wrapper[1] || opt_lWrap,\r\n      opt_lEscape = v1(opt_escape[0], '') + '',\r\n      opt_rEscape = v1(opt_escape[1], opt_lEscape) + '';\r\n  return opt_lWrap\r\n    + (str + '').replace(\r\n        RegExp(quoteRegExp(opt_lWrap) + '|' + quoteRegExp(opt_rWrap), 'g'),\r\n        function(m) { return m == opt_lWrap ? opt_lEscape : opt_rEscape; }\r\n      )\r\n    + opt_rWrap;\r\n}\r\n\r\nfunction unwrap(str, opt_wrapper, opt_escape) {\r\n  opt_wrapper = toArray(opt_wrapper);\r\n  opt_escape = toArray(opt_escape);\r\n  var opt_lWrap = (opt_wrapper[0] || '\"') + '',\r\n      opt_rWrap = (opt_wrapper[1] || opt_lWrap) + '',\r\n      opt_lEscape = v1(opt_escape[0], '') + '',\r\n      opt_rEscape = v1(opt_escape[1], opt_lEscape) + '',\r\n      strRgx = '^' + quoteRegExp(opt_lWrap) + '|(' + quoteRegExp(opt_rWrap) \r\n             + '$)|(' + quoteRegExp(opt_lEscape) + ')|'\r\n             + quoteRegExp(opt_rEscape);\r\n  return (str + '').replace(RegExp(strRgx, 'g'), function(m, r, l, i) {\r\n    return i && !r && m ? l ? opt_lWrap : opt_rWrap : '';\r\n  });\r\n}","post":"<h2><code>wrap(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Wraps a string with another string, providing the ability to also escape any instances of the surrounding strings.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>str<\/code> {*}:<br \/>The string (value coerced to a string) to be wrapped.<\/li>\r\n    <li><code>opt_wrapper<\/code> {Array|string}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">['\"', '\"']<\/code>.  If this is a string it will be converted to an array where the string is both the 1st and 2nd value.  The 1st value in the array will prefix the returned string.  The 2nd value in the array (or the string found in this parameter) will terminate the returned string.<\/li>\r\n    <li><code>opt_escape<\/code> {Array|string}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">['\"', '\"']<\/code>.  If this is a string it will be converted to an array where the string is both the 1st and 2nd value.  The 1st value in the array will replace all occurrences of the 1st wrapper from <code>opt_wrapper<\/code>.  The 2nd value in the array (or the string found in this parameter) replace all occurrences of the 2nd wrapper from <code>opt_wrapper<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns the 1st wrapper from <code>opt_wrapper<\/code>, followed by <code>str<\/code> (with all occurrences of the wrapper(s) replaced with the corresponding escapes from <code>opt_escape<\/code>), followed by the 2nd wrapper from <code>opt_wrapper<\/code>.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.wrap(0));  \/\/ -> '\"0\"'\r\nconsole.log(YourJS.wrap('Hello', \"'\"));  \/\/ -> \"'Hello'\"\r\nconsole.log('Hello ' + YourJS.wrap('name', ['{', '}']));  \/\/ -> 'Hello {name}'\r\nconsole.log(YourJS.wrap('He always says, \"hey guys\".', '\"', '\"\"'));  \/\/ -> '\"He always says, \"\"hey guys\"\".\"'\r\nconsole.log(YourJS.wrap('Hi {name}.', ['{', '}'], ['\\\\{', '\\\\}']));  \/\/ -> '{Hi \\\\{name\\\\}.}'<\/code><\/pre>\r\n<\/div>\r\n\r\n<h2><code>unwrap(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Unwraps a string, removing the surrounding substring and also reverting the escaped substrings.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><code>str<\/code> {*}:<br \/>The string (value coerced to a string) to be unwrapped.<\/li>\r\n    <li><code>opt_wrapper<\/code> {Array|string}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">['\"', '\"']<\/code>.  If this is a string it will be converted to an array where the string is both the 1st and 2nd value.  The 1st value in the array will be removed from the start of the string.  The 2nd value in the array (or the string found in this parameter) will be removed from the end of the string.<\/li>\r\n    <li><code>opt_escape<\/code> {Array|string}:<br \/>Optional.  Defaults to <code class=\"language-javascript\">['', '']<\/code>.  If this is a string it will be converted to an array where the string is both the 1st and 2nd value.  All instances of the 1st value in the array found in <code>str<\/code> will be replaced with the 1st wrapper from <code>opt_wrapper<\/code>.  All instances of the 2nd value in the array (or the string found in this parameter) found in <code>str<\/code> will be replaced with the 2nd wrapper from <code>opt_wrapper<\/code>.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns <code>str<\/code> with the 1st wrapper from <code>opt_wrapper<\/code> removed from the beginning and the 2nd wrapper from <code>opt_wrapper<\/code> removed from the end.  All instances of the escaped values will be replaced with the corresponding wrapper.<\/div>\r\n  \r\n  <h3>Example<\/h3>\r\n  <pre class=\"language-javascript\"><code>console.log(YourJS.unwrap(0));  \/\/ -> '0'\r\nconsole.log(YourJS.unwrap(\"'Hello'\", \"'\"));  \/\/ -> \"Hello\"\r\nconsole.log('Hello ' + YourJS.unwrap('{name}', ['{', '}']));  \/\/ -> 'Hello name'\r\nconsole.log(YourJS.unwrap('\"He always says, \"\"hey guys\"\".\"', '\"', '\"\"'));  \/\/ -> 'He always says, \"hey guys\".'\r\nconsole.log(YourJS.unwrap('{Hi \\\\{name\\\\}.}', ['{', '}'], ['\\\\{', '\\\\}']));  \/\/ -> 'Hi {name}.'<\/code><\/pre>\r\n<\/div>","required_ids":{"27":"quoteRegExp() - Escaping RegExp Metacharacters","81":"isArrayLike() & toArray()","104":"v1() - Determine 1st Non-nothing Value"},"tags":["String"],"variables":["unwrap","wrap"]});
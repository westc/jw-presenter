storeSnippet({"id":12,"name":"setArgs() - Partial Application","description":"Set specific arguments in a function.  Unlike YourJS.partial(), this function allows us to specify the exact argument indices we want to predefine.","js":"function setArgs(fn, objPreArgs) {\r\n  var n, arrPreArgIsSet = [];\r\n  for (var k in objPreArgs) {\r\n    n = parseInt(k, 10);\r\n    if (n >= 0 && has(objPreArgs, n)) {\r\n      arrPreArgIsSet[n] = true;\r\n    }\r\n  }\r\n  var lOuter = arrPreArgIsSet.length;\r\n\r\n  return function() {\r\n    var arrArgs = [], arrPostArgs = slice(arguments), lInner = arrPostArgs.length;\r\n    for (var iOuter = 0, iInner = 0; iOuter < lOuter; iOuter++) {\r\n      arrArgs[iOuter] = arrPreArgIsSet[iOuter] ? objPreArgs[iOuter] : arrPostArgs[iInner++];\r\n    }\r\n    return fn.apply(this, arrArgs.concat(arrPostArgs.slice(iInner)));\r\n  };\r\n}","post":"<h2><code>setArgs(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Gives us the ability to set specific arguments in a function.  Unlike <code class=\"language-javascript\">YourJS.partial()<\/code>, this function allows us to specify the exact argument indices we want to predefine.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li><b><code>fn<\/code> {Function}:<\/b><br \/>Function to be called with the modified arguments.<\/li>\r\n    <li><b><code>objPreArgs<\/code> {Array|Object}:<\/b><br \/>Array or object whose values will be sent as arguments to <code>fn<\/code> at the specified indices.<\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns a function which will call <code>fn<\/code> with the predefined arguments at their specified indices.  Any arguments passed to this function will be used to fill in the arguments that were not predefined.<\/div>\r\n  \r\n  <h3>Examples<\/h3>\r\n  <div>Here is a simple example in which we predefine the 2<sup>nd<\/sup> and 3<sup>rd<\/sup> argument of <code class=\"language-javascript\">YourJS.typeOf()<\/code>:<\/div>\r\n  <pre class=\"language-javascript\"><code>var isNumOrStr = YourJS.setArgs(YourJS.typeOf, { 1: 'Number', 2: 'String' });\r\nconsole.log(isNumOrStr(0));      \/\/ -> true\r\nconsole.log(isNumOrStr('Cool')); \/\/ -> true\r\nconsole.log(isNumOrStr(NaN));    \/\/ -> true\r\nconsole.log(isNumOrStr([5]));    \/\/ -> false<\/code><\/pre>\r\n\r\n  <div>Here is an example of combining this with the <code class=\"language-javascript\">YourJS.get()<\/code> function to make specific property getters:<\/div>\r\n  <pre class=\"language-javascript\"><code>var getLength = YourJS.setArgs(YourJS.get, { 1: 'length' });\r\nconsole.log(getLength('Hello world!'));   \/\/ -> 12\r\nconsole.log(getLength(['Hello world!'])); \/\/ -> 1<\/code><\/pre>\r\n<\/div>","required_ids":{},"tags":["Function"],"variables":["setArgs"]});
storeSnippet({"id":54,"name":"fuse() - Fusing Two or More Functions","description":"Creates a wrapper function for two or more functions essentially fusing them all into one.","js":"function fuse(fn1, fn2, opt_excludeRetArgs) {\r\n  var fns = slice(arguments), l = fns.length;\r\n  opt_excludeRetArgs = typeOf(fns[l - 1], 'Function') ? 0 : (l--, fns.pop());\r\n  return function() {\r\n    for (var arrArgs = slice(arguments), extraArgs = [], me = this, i = 0, ret; i < l; i++) {\r\n      ret = fns[i].apply(me, arrArgs.concat(extraArgs));\r\n      if (!opt_excludeRetArgs) {\r\n        extraArgs.push(ret);\r\n      }\r\n    }\r\n    return ret;\r\n  };\r\n}","post":"<h2><code>fuse()<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Creates a wrapper function for two or more functions essentially fusing them all into one.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>fn1<\/code> {Function}:<\/b><br \/>\r\n      The first function to be called by the wrapper function.\r\n    <\/li>\r\n    <li>\r\n      <b><code>fn2<\/code> {Function}:<\/b><br \/>\r\n      The second function to be called by the wrapper function.\r\n    <\/li>\r\n    <li>\r\n      <b><code>...opt_fnX<\/code> {Function=}:<\/b><br \/>\r\n      Optional.  Each function to be subsequently called after <code>fn2<\/code> by the wrapper function.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_excludeRetArgs<\/code> {Boolean=}:<\/b><br \/>\r\n      Optional.  Defaults to <code>false<\/code>.  If <code>true<\/code> the arguments passed to each wrapped function will be the same as those passed to the wrapper function.  If <code>false<\/code> the arguments passed to each wrapped function will start off with those passed to the wrapper function but then each subquent argument will be the return value of the previous wrapped function(s).\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns a wrapper function which when called will execute each of the passed functions (eg. <code>fn1<\/code>, <code>fn2<\/code>, etc.) in order.  The return value of the wrapper function will be the return value of the last wrapped function.<\/div>\r\n<\/div>","required_ids":{},"tags":["Function"],"variables":["fuse"]});
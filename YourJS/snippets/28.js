storeSnippet({"id":28,"name":"flagRegExp() - Modify RegExp Flags","description":"Creates a new version of a regular expression in which the flags are modified.","js":"function flagRegExp(rgx, modifiers) {\r\n  var flags = (rgx + '').replace(\/[\\s\\S]+\\\/\/, '');\r\n  modifiers.replace(\/([-+!]?)(\\w)\/g, function(index, op, flag) {\r\n    index = flags.indexOf(flag)\r\n    flags = op == '-' || (op == '!' && index >= 0)\r\n      ? flags.replace(flag, '')\r\n      : index < 0\r\n        ? flags + flag\r\n        : flags;\r\n  });\r\n  return new RegExp(rgx.source, flags);\r\n}","post":"At times its necessary to create a new version of a given RegExp but with different flags.  For example we may need to make sure that a RegExp has the `g` (global) flag.  Now with the `YourJS.flagRegExp()` we can easily get this done:\r\n```javascript\r\nvar rgxTrim = \/^\\s+|\\s$\/;\r\nvar rgxTrimGlobal = YourJS.flagRegExp(rgxTrim, '+g');\r\n\r\nvar str = '   Hello world!   ';\r\nconsole.log(JSON.stringify(str.replace(rgxTrim, ''));\r\n\/\/ -> \"Hello world!   \"\r\nconsole.log(JSON.stringify(str.replace(rgxTrimGlobal, ''));\r\n\/\/ -> \"Hello world!\"\r\n```\r\n\r\n<h2><code>flagRegExp(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n  <h3>Description<\/h3>\r\n  <div>Creates a new copy of a regular expression with modified flags.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>rgx<\/code> {RegExp}:<\/b><br \/>\r\n      The <code>RegExp<\/code> to be duplicated with modified flags.\r\n    <\/li>\r\n    <li>\r\n      <b><code>modifiers<\/code> {string}:<\/b><br \/>\r\n      Specifies how to modify the flags of the duplicate of <code>rgx<\/code>.  The standard flags are of course <code>g<\/code> for global, <code>i<\/code> for ignoreCase and <code>m<\/code> for multiline.  In some environments other flags are also available.  In order to assure that the duplicate will have specified flag you can just add the flag character (optionally you can prefix it with a <code>+<\/code>) to the string.  In order to assure that the duplicate will exclude a specified flag you can enter <code>-<\/code> followed by the flag character in this string.  In order to toggle the flag in the duplicate you can prefix the flag character with <code>!<\/code>.  For example `\"g-i!m\"` (which is the same as `\"+g-i!m\"`) will ensure the `g` flag is included, ensure the `i` flag is excluded and toggle `m`.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns a duplicate of <code>rgx<\/code> with modified flags as specified by the <code>modifiers<\/code> string.<\/div>\r\n<\/div>","required_ids":{},"tags":["RegExp"],"variables":["flagRegExp"]});
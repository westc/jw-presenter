storeSnippet({"id":15,"name":"cap() - Limit Function Argument Count","description":"Create a function which will only handle up to a certain amount of arguments.  All additional arguments will be ignored.","js":"function cap(fn, opt_maxArity) {\r\n  opt_maxArity = opt_maxArity != undefined ? opt_maxArity : fn.length;\r\n  return function() {\r\n    return fn.apply(this, slice(arguments, 0, opt_maxArity));\r\n  };\r\n}","post":"<h2><code style=\"font-size: 1em;\">cap(fn [, opt_maxArity=fn.length])<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n    <h3>Parameters<\/h3>\r\n    <ol>\r\n        <li>\r\n            <b><code>fn<\/code> {Function}:<\/b><br \/>\r\n            The function whose argument count will be capped off (limited).\r\n        <\/li>\r\n        <li>\r\n            <b><code>opt_maxArity<\/code> {number}:<\/b><br \/>\r\n            Optional.  Defaults to <code>fn.length<\/code>.  The max number of arguments that will be passed into <code>fn<\/code>.\r\n        <\/li>\r\n    <\/ol>\r\n    \r\n    <h3>Returns<\/h3>\r\n    <div>Returns a function that will call <code>fn<\/code> with the passed in arguments when invoked, but it will limit the argument count to the value <code>opt_maxArity<\/code>.  When calling this newly created function, it will behave like this:  <code>fn.apply(this, YourJS.slice(arguments, 0, opt_maxArity))<\/code>.<\/div>\r\n<\/div>","required_ids":{},"tags":["Function"],"variables":["cap"]});
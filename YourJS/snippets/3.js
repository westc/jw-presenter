storeSnippet({"id":3,"name":"sub() - String Placeholder Substitution","description":"Easily do string substitution in JavaScript with YourJS.sub().  Use similar syntax to that provided in ES6 with template strings.  Handle pluralization of variables easily.","js":"var sub;\r\n(function(RGX) {\r\n  sub = function(str, opt_subs) {\r\n    opt_subs = opt_subs\r\n      ? \/^(Array|Object)$\/.test(typeOf(opt_subs))\r\n        ? opt_subs\r\n        : slice(arguments, 1)\r\n      : __global;\r\n    var counter = 0;\r\n    return str.replace(\r\n      RGX,\r\n      function(m, key, conditional, keyPlural, staticPlural, keySingular, staticSingular, mNone, keyNone, staticNone) {\r\n        var args = slice(arguments); \/\/ To preserve the arguments passed to this function for any callback subs.\r\n        keyPlural = keyPlural === '' ? counter++ : keyPlural;\r\n        keySingular = keySingular === '' ? counter++ : keySingular;\r\n        keyNone = keyNone === '' ? counter++ : keyNone;\r\n        return has(opt_subs, key = key || counter++)\r\n          ? (key = typeOf(key = opt_subs[key], 'Function') ? key.apply(str, args) : key, conditional)\r\n            ? key - 1 != 0\r\n              ? key || !mNone\r\n                ? (keyPlural && has(opt_subs, keyPlural)\r\n                  ? typeOf(keyPlural = opt_subs[keyPlural], 'Function')\r\n                    ? keyPlural.apply(str, args)\r\n                    : keyPlural\r\n                  : staticPlural)\r\n                : (keyNone && has(opt_subs, keyNone)\r\n                  ? typeOf(keyNone = opt_subs[keyNone], 'Function')\r\n                    ? keyNone.apply(str, args)\r\n                    : keyNone\r\n                  : staticNone)\r\n              : (keySingular && has(opt_subs, keySingular)\r\n                ? typeOf(keySingular = opt_subs[keySingular], 'Function')\r\n                  ? keySingular.apply(str, args)\r\n                  : keySingular\r\n                : staticSingular)\r\n            : key\r\n          : m;\r\n      }\r\n    );\r\n  };\r\n})(\/\\{([\\$\\w]*)(\\?(?:\\{([\\$\\w]*)\\}|([\\s\\S]*?))\\:(?:\\{([\\$\\w]*)\\}|([\\s\\S]*?))(\\:(?:\\{([\\$\\w]*)\\}|([\\s\\S]*?)))?)?\\}\/g);","post":"Thanks to the awesomeness that is ES6 we can now easily sub strings into other strings:\r\n\r\n```\r\n`string text ${expression} string text`\r\n```\r\n\r\nStill it would be nice to have code that works similarly in plain JS now!  The `sub()` function does just that with a few minor differences.  First of all, in order to indicate a placeholder you must wrap the variable name in curly brackets (without prefixing it with a dollar sign):\r\n\r\n```javascript\r\n\/\/ Print:  \"Hello, my name is Chris West.\"\r\nfname = \"Chris\";\r\nlname = \"West\";\r\nconsole.log(YourJS.sub(\"Hello, my name is {fname} {lname}.\"));\r\n```\r\n\r\nNext, instead of just using the global namespace (which is not recommended anyway), we can specify a context object:\r\n\r\n```javascript\r\n\/\/ Print:  \"Hello, my name is Chris West.\"\r\nconsole.log(YourJS.sub(\"Hello, my name is {fname} {lname}.\", {\r\n  fname: 'Chris',\r\n  lname: 'West'\r\n}));\r\n```\r\n\r\nWe can also leverage this function to singularize or pluralize or even \"non\"ize words.\r\n\r\n```javascript\r\n\/* Print:\r\n * I now have no apples.\r\n * I now have one apple.\r\n * I now have 2 apples.\r\n *\/\r\nfor (apples = 0; apples <= 2; apples++) {\r\n  console.log(YourJS.sub(\"I now have {apples?{apples}:one:no} apple{apples?s:}.\"));\r\n}\r\n```\r\n\r\nAgain, the recommended way is to avoid polluting the global namespace so we could do this instead (assuming the code is called within a different namespace):\r\n\r\n```javascript\r\n\/* Print:\r\n * I now have no apples.\r\n * I now have one apple.\r\n * I now have 2 apples.\r\n *\/\r\nfor (var ctx = {apples: 0}; ctx.apples <= 2; ctx.apples++) {\r\n  console.log(YourJS.sub(\"I now have {apples?{apples}:one:no} apple{apples?s:}.\", ctx));\r\n}\r\n```\r\n\r\nI personally feel that this function can be a great addition to your customized JS library so have fun using it!\r\n\r\n<h2><code>sub(...)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px\">\r\n  <h3>Description<\/h3>\r\n  <div>Substitute values into strings where the corresponding placeholders have been entered.<\/div>\r\n  \r\n  <h3>Parameters<\/h3>\r\n  <ol>\r\n    <li>\r\n      <b><code>str<\/code> {string}:<\/b><br \/>\r\n      The string containing placeholders to be filled in and returned.  A placeholder must correspond to a value in <code>opt_subs<\/code> and its name must be surrounded in curly braces (eg. <code>\"Hello {name}!\"<\/code> contains the <code>name<\/code> placeholder).  If a placeholder refers to a number, a ternary operator can be used (eg. <code>\"You have {apples} apple{apples?s:}\"<\/code>).  What appears between the <code>?<\/code> and the <code>:<\/code> will replace the placeholder if the variable before the <code>?<\/code> is not <code>1<\/code>.  What appears after the <code>:<\/code> will replace the placeholder if the variable before the <code>?<\/code> is <code>1<\/code>.  A <i>4-ary<\/i> (AKA quaterary) operator can also be used if a placeholder refers to a number (eg. <code>\"You have {apples?{apples}:one:no} apple{apples?s:}\"<\/code>).  When using a 4-ary operator, whatever appears after the second <code>:<\/code> will replace the placeholder if the variable before the <code>?<\/code> is <code>0<\/code>.\r\n    <\/li>\r\n    <li>\r\n      <b><code>opt_subs<\/code> {Array|Object}:<\/b><br \/>\r\n      Optional.  Defaults to the global object.  Contains the values to be used to fill in the placeholders in <code>str<\/code>.\r\n    <\/li>\r\n  <\/ol>\r\n  \r\n  <h3>Returns<\/h3>\r\n  <div>Returns <code>str<\/code> with all of the valid placeholders filled in with their substitutions as found in <code>opt_subs<\/code>.<\/div>\r\n<\/div>","required_ids":{},"tags":["ES6\/7","String"],"variables":["sub"]});
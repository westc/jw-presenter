storeSnippet({"id":14,"name":"Getters & Setters","description":"Get and\/or set values in an object.","js":"function get(obj, propName, opt_defaultValue) {\r\n  return has(obj, propName) ? obj[propName] : opt_defaultValue;\r\n}\r\n\r\nfunction set(obj, propName, value) {\r\n  var prev = obj[propName];\r\n  obj[propName] = value;\r\n  return this instanceof YourJS ? obj : prev;\r\n}","post":"One of the fundamentals of object-oriented programming is getters and setters.  Getters and setters can make it easier to modify objects:\r\n```javascript\r\nvar me = {\r\n  first_name: 'Chris',\r\n  last_name: 'North'\r\n};\r\n\r\nYourJS.set(me, 'last_name', 'West');  \/\/ Returns \"North\"\r\nconsole.log('First Name:', YourJS.get(me, 'first_name'));\r\nconsole.log('Last Name:', YourJS.get(me, 'last_name'));\r\n```\r\n\r\nUsing these two functions along with `YourJS.partial()` and `YourJS.rearg()` we can create property specific getters and setters for any object:\r\n```javascript\r\nvar me = {\r\n  first_name: 'Chris',\r\n  last_name: 'North'\r\n};\r\nvar getFirstName = YourJS.partial(YourJS.rearg(YourJS.get, 1, 0), 'first_name');\r\nvar getLastName = YourJS.partial(YourJS.rearg(YourJS.get, 1, 0), 'last_name');\r\n\r\nconsole.log('First Name:', getFirstName(me));\r\nconsole.log('Last Name:', getLastName(me));\r\n```\r\n\r\n<h2><code style=\"font-size: 1em;\">YourJS.get(obj, propName, opt_defaultValue)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n    <h3>Parameters<\/h3>\r\n    <ol>\r\n        <li>\r\n            <b><code>obj<\/code> {Object}:<\/b><br \/>\r\n            The object whose property will be retrieved.\r\n        <\/li>\r\n        <li>\r\n            <b><code>propName<\/code> {string}:<\/b><br \/>\r\n            The name of the property to be retrieved.\r\n        <\/li>\r\n        <li>\r\n            <b><code>opt_defaultValue<\/code> {*}:<\/b><br \/>\r\n            Optional.  The default value to return if <code>obj[propName]<\/code> wasn't ever defined.\r\n        <\/li>\r\n    <\/ol>\r\n    \r\n    <h3>Returns<\/h3>\r\n    <div>Returns <code>obj[propName]<\/code> if it was defined, otherwise returns <code>opt_defaultValue<\/code>.<\/div>\r\n<\/div>\r\n\r\n<h2><code style=\"font-size: 1em;\">YourJS.set(obj, propName, value)<\/code> API Documentation<\/h2>\r\n<div style=\"margin: 0 30px 30px;\">\r\n    <h3>Parameters<\/h3>\r\n    <ol>\r\n        <li>\r\n            <b><code>obj<\/code> {Object}:<\/b><br \/>\r\n            The object whose property will be modified.\r\n        <\/li>\r\n        <li>\r\n            <b><code>propName<\/code> {string}:<\/b><br \/>\r\n            The name of the property to be modified.\r\n        <\/li>\r\n        <li>\r\n            <b><code>value<\/code> {*}:<\/b><br \/>\r\n            The value to assign to <code>obj[propName]<\/code>.\r\n        <\/li>\r\n    <\/ol>\r\n    \r\n    <h3>Returns<\/h3>\r\n    <div>Returns the previous value of <code>obj[propName]<\/code>.<\/div>\r\n<\/div>","required_ids":{},"tags":["Object"],"variables":["get","set"]});
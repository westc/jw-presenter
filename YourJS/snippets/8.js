storeSnippet({"id":8,"name":"indexOf()","description":"Finds the index of a specified value in an array (or array-like object) or an object.","js":"function indexOf(obj, target, opt_fromIndex) {\r\n  if (isArrayLike(obj)) {\r\n    for (var i = opt_fromIndex ? opt_fromIndex < 0 ? Math.max(0, obj.length + opt_fromIndex) : opt_fromIndex : 0, l = obj.length; i < l; i++) {\r\n      if (has(obj, i) && obj[i] === target) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  else if (typeOf(obj = Object(obj), 'String')) {\r\n    return obj.indexOf(target + '', opt_fromIndex);\r\n  }\r\n  for (var key in obj) {\r\n    if (has(obj, key) && obj[key] === target) {\r\n      return key;\r\n    }\r\n  }\r\n}","post":"ECMAScript 6 introduced some new array function.  One of them is <a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf\" target=\"_blank\">`Array.prototype.indexOf()`<\/a>.  Unfortunately, as is normal when writing in JS, we cant assume that everyone and their grandmom is using a browser that has this function defined.  Also, at times we may want to find the property name of an object with a specific value.  That is the reason I wrote `indexOf()` for YourJS.\r\n\r\n<h2>Documenation<\/h2>\r\n<div style=\"padding: 0 30px 30px;\">\r\n    <h3>Parameters<\/h3>\r\n    <ol>\r\n        <li>\r\n            <b><code>obj<\/code> {Array|Object|string}<\/b>:<br \/>\r\n            The array, object or string that will be searched.\r\n        <\/li>\r\n        <li>\r\n            <b><code>target<\/code> {*}<\/b>:<br \/>\r\n            The thing be searched for within <code>obj<\/code>.\r\n        <\/li>\r\n        <li>\r\n            <b><code>opt_fromIndex<\/code> {number}<\/b>:<br \/>\r\n            Optional.  Defaults to <code>0<\/code>.  When searching an array or a string, this is indicates the starting index in the search.  When searching an array, a negative value will start that many positions from the end.\r\n        <\/li>\r\n    <\/ol>\r\n    \r\n    <h3>Return<\/h3>\r\n    <div>If <code>obj<\/code> is an <code>Array<\/code> (or <code>Array<\/code>-like) or a <code>string<\/code> the return value will be a non-negative integer if <code>target<\/code> was found or<code>-1<\/code> if not found.  If <code>obj<\/code> is an <code>Object<\/code> the return value will be a string if <code>target<\/code> is found.  In all other cases the return value will be <code>undefined<\/code>.<\/div>\r\n<\/div>","required_ids":{"81":"isArrayLike() & toArray()"},"tags":["Array","ES6\/7","Object","String"],"variables":["indexOf"]});